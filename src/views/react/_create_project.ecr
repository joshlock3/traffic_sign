<script>
    /*
     * Components
     */

    var ProjectForm = React.createClass({
        propTypes: {
            value: React.PropTypes.object.isRequired,
            onChange: React.PropTypes.func.isRequired,
            onSubmit: React.PropTypes.func.isRequired,
        },

        onNameChange: function(e) {
            this.props.onChange(Object.assign({}, this.props.value, {
                name: e.target.value
            }));
        },

        onTeamIdChange: function(e) {
            this.props.onChange(Object.assign({}, this.props.value, {
                team_id: e.target.value
            }));
        },

        onDueDateChange: function(e) {
            this.props.onChange(Object.assign({}, this.props.value, {
                due_date: e.target.value
            }));
        },
        onAdjustedDueDateChange: function(e) {
            this.props.onChange(Object.assign({}, this.props.value, {
                adjusted_due_date: e.target.value
            }));
        },
        onStatusIdChange: function(e) {
            this.props.onChange(Object.assign({}, this.props.value, {
                status_id: e.target.value
            }));
        },
        onCompletedChange: function(e) {
            this.props.onChange(Object.assign({}, this.props.value, {
                completed: e.target.value
            }));
        },

        onSubmit: function(e) {
            e.preventDefault();
            this.props.onSubmit();
        },

        render: function() {
            var errors = this.props.value.errors || {};

            return (
                React.createElement('form', {
                        onSubmit: this.onSubmit,
                        className: 'ProjectForm',
                        noValidate: true
                    },
                    React.createElement('input', {
                        type: 'text',
                        className: errors.name && 'ProjectForm-error',
                        placeholder: 'Name (required)',
                        value: this.props.value.name,
                        onChange: this.onNameChange,
                    }),
                    React.createElement('input', {
                        type: 'text',
                        className: errors.team_id && 'ProjectForm-error',
                        placeholder: 'Team (required)',
                        value: this.props.value.team_id,
                        onChange: this.onTeamIdChange,
                    }),
                    React.createElement('input', {
                        type: 'date',
                        className: errors.due_date && 'ProjectForm-error',
                        placeholder: 'Due Date (required)',
                        value: this.props.value.due_date,
                        onChange: this.onDueDateChange,
                    }),
                    React.createElement('input', {
                        type: 'date',
                        placeholder: 'Adjusted Due Date',
                        className: errors.adjusted_due_date && 'ProjectForm-error',
                        value: this.props.value.adjusted_due_date,
                        onChange: this.onAdjustedDueDateChange,
                    }),
                    React.createElement('input', {
                        type: 'text',
                        placeholder: 'Status',
                        className: errors.status_id && 'ProjectForm-error',
                        value: this.props.value.status_id,
                        onChange: this.onStatusIdChange,
                    }),
                    React.createElement('input', {
                        type: 'text',
                        placeholder: 'Completed',
                        className: errors.completed && 'ProjectForm-error',
                        value: this.props.value.completed,
                        onChange: this.onCompletedChange,
                    }),
                    React.createElement('button', {
                        type: 'submit'
                    }, "Add Project")
                )
            );
        },
    });


    var ProjectItem = React.createClass({
        propTypes: {
            name: React.PropTypes.string.isRequired,
            team_id: React.PropTypes.number.isRequired,
            due_date: React.PropTypes.string,
            adjusted_due_date: React.PropTypes.string,
            status_id: React.PropTypes.number,
            completed: React.PropTypes.string,
        },

        render: function() {
            return (
                React.createElement('li', {
                        className: 'ProjectItem'
                    },
                    React.createElement('h2', {
                        className: 'ProjectItem-name'
                    }, this.props.name),
                    React.createElement('h3', {
                        className: 'ProjectItem-team-id'
                    }, this.props.team_id),
                    React.createElement('h3', {
                        className: 'ProjectItem-due-date'
                    }, this.props.due_date),
                    React.createElement('h3', {
                        className: 'ProjectItem-adjusted-due-date'
                    }, this.props.adjusted_due_date),
                    React.createElement('h3', {
                        className: 'ProjectItem-status-id'
                    }, this.props.status_id),
                    React.createElement('h3', {
                        className: 'ProjectItem-completed'
                    }, this.props.completed)
                )
            );
        },
    });


    var ProjectView = React.createClass({
        propTypes: {
            projects: React.PropTypes.array.isRequired,
            newProject: React.PropTypes.object.isRequired,
            onNewProjectChange: React.PropTypes.func.isRequired,
            onNewProjectSubmit: React.PropTypes.func.isRequired,
        },

        render: function() {
            var projectItemElements = this.props.projects
                .filter(function(project) {
                    return project.name;
                })
                .map(function(project) {
                    return React.createElement(ProjectItem, project);
                });

            return (
                React.createElement('div', {
                        className: 'ProjectView'
                    },
                    React.createElement('h1', {
                        className: 'ProjectView-title'
                    }, "Projects"),
                    React.createElement('a', {href: '#/team-projects'}, "Filter by Team"),
                    React.createElement('ul', {
                        className: 'ProjectView-list'
                    }, projectItemElements),
                    React.createElement(ProjectForm, {
                        value: this.props.newProject,
                        onChange: this.props.onNewProjectChange,
                        onSubmit: this.props.onNewProjectSubmit,
                    })
                )
            );
        },
    });

    var TeamProjectView = React.createClass({
        propTypes: {
            projects: React.PropTypes.array.isRequired,
            newProject: React.PropTypes.object.isRequired,
            onNewProjectChange: React.PropTypes.func.isRequired,
            onNewProjectSubmit: React.PropTypes.func.isRequired,
        },

        render: function() {
            var projectItemElements = this.props.projects
                .filter(function(project) {
                    return project.name;
                })
                .map(function(project) {
                    return React.createElement(ProjectItem, project);
                });

            return (
                React.createElement('div', {
                        className: 'TeamProjectView'
                    },
                    React.createElement('h1', {
                        className: 'TeamProjectView-title'
                    }, "Team Projects"),
                    React.createElement('a', {href: '#/'}, "Back to All"),
                    React.createElement('ul', {
                        className: 'TeamProjectView-list'
                    }, projectItemElements),
                    React.createElement(ProjectForm, {
                        value: this.props.newProject,
                        onChange: this.props.onNewProjectChange,
                        onSubmit: this.props.onNewProjectSubmit,
                    })
                )
            );
        },
    });

    /*
     * Constants
     */

    var PROJECT_TEMPLATE = {
        name: "",
        team_id: "",
        due_date: "",
        adjusted_due_date: "",
        status_id: "",
        completed: "",
        errors: null
    };

    /*
     * Actions
     */

    function updateNewProject(project) {
        setState({
            newProject: project
        });
    }

    function submitNewProject() {
        var project = Object.assign({}, state.newProject, {
            key: state.projects.length + 1,
            errors: {}
        });

        if (!project.name) {
            project.errors.name = ["Please enter your new project's name"];
        }
        if (!project.team_id) {
            project.errors.team_id = ["Please enter your new team"];
        }
        setState(
            Object.keys(project.errors).length === 0 ? {
                newProject: Object.assign({}, PROJECT_TEMPLATE),
                projects: state.projects.slice(0).concat(project),
            } : {
                newProject: project
            }
        );
    }

    /*
     * Model
     */

    // The app's complete current state
    var state = {};

    // Make the given changes to the state and perform any required housekeeping
    function setState(changes) {
        var component;

        Object.assign(state, changes);

        // ReactDOM.render(
        //     React.createElement(ProjectView, Object.assign({}, state, {
        //         onNewProjectChange: updateNewProject,
        //         onNewProjectSubmit: submitNewProject,
        //     })),
        //     document.getElementById('project-container')
        // );

        switch (state.location) {
            case '#/all-projects':
                component = React.createElement(ProjectView, Object.assign({}, state, {
                    onNewProjectChange: updateNewProject,
                    onNewProjectSubmit: submitNewProject,
                }));
                ReactDOM.render(component, document.getElementById('project-container'));
            case '#/team-projects':
                component = React.createElement(TeamProjectView, Object.assign({}, state, {
                    onNewProjectChange: updateNewProject,
                    onNewProjectSubmit: submitNewProject,
                }));
                ReactDOM.render(component, document.getElementById('team-container'));
            break;
            default:
                component = React.createElement('div', {},
                    React.createElement('h1', {}),
                    React.createElement('a', {href: '#/team-projects'}, "Filter by Team"),
                    React.createElement('br'),
                    React.createElement('a', {href: '#/'}, "Back to All")
                );
                ReactDOM.render(component, document.getElementById('project-container'));
        }
        // ReactDOM.render(component, document.getElementById('project-container'));
    }

    // Set initial data
    setState({
        projects: [],
        newProject: Object.assign({}, PROJECT_TEMPLATE),
    });

    function navigated() {
        setState({location: window.location.hash});
    }

    // Handle browser navigation events
    window.addEventListener('hashchange', navigated, false);

    // Start the app
    navigated();
</script>
